const INDENT = '  '

const lispyTraverser = {
  NumberLiteral: {
    onEnter: ({ code, indentLevel }, node) => {
      return {
        code: code + INDENT.repeat(indentLevel) + node.value + ',\n',
        indentLevel
      }
    }
  },
  StringLiteral: {
    onEnter: ({ code, indentLevel }, node) => {
      return {
        code: code + INDENT.repeat(indentLevel) + '\'' + node.value + '\',\n',
        indentLevel
      }
    }
  },
  CallExpression: {
    onEnter: ({ code, indentLevel }, node) => {
      return {
        code: code + INDENT.repeat(indentLevel) + node.callee + '(\n',
        indentLevel: indentLevel + 1
      }
    },
    onExit: ({ code, indentLevel }, node) => {
      return {
        code: code + INDENT.repeat(indentLevel - 1) + ')\n',
        indentLevel: indentLevel - 1
      }
    }
  }
}

const traverseNode = (node, traverser, state0) => {
  const onEnter = traverser[node.type].onEnter || (x => x)
  const onExit = traverser[node.type].onExit || (x => x)
  const state1 = onEnter(state0, node)
  const state2 = node.type !== 'CallExpression' ?
    state1
    : node.arguments.reduce((stateX, node) => {
      return traverseNode(node, traverser, stateX)
    }, state1)
  const state3 = onExit(state2, node)
  return state3
}

const generateJavascript = ast => {
  const rootNode = ast.body
  const { code } = traverseNode(rootNode, lispyTraverser, {
    code: '/** Generated by lispy-compiler **/\n\n',
    indentLevel: 0
  })
  return code
}

export default generateJavascript
